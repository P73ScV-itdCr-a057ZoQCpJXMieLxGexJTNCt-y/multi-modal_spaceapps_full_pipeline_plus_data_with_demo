###########################################################
# variables.tf
###########################################################
variable "aws_region" {
  default = "us-west-2"
}

variable "account_id" {
  type = string
}

variable "project_prefix" {
  default = "hospital-analyzer"
}

###########################################################
# provider.tf
###########################################################
provider "aws" {
  region = var.aws_region
}

###########################################################
# iam.tf
###########################################################
resource "aws_iam_role" "hospital_analyzer_role" {
  name = "${var.project_prefix}-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Principal = {
          Service = [
            "lambda.amazonaws.com",
            "sagemaker.amazonaws.com",
            "ec2.amazonaws.com"
          ]
        }
        Action = "sts:AssumeRole"
      }
    ]
  })
}

resource "aws_iam_role_policy" "hospital_analyzer_policy" {
  name = "${var.project_prefix}-policy"
  role = aws_iam_role.hospital_analyzer_role.id

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Action = [
          "s3:GetObject",
          "s3:PutObject",
          "s3:ListBucket"
        ]
        Resource = [
          "${aws_s3_bucket.results.arn}",
          "${aws_s3_bucket.results.arn}/*",
          "${aws_s3_bucket.data.arn}",
          "${aws_s3_bucket.data.arn}/*"
        ]
      },
      {
        Effect = "Allow"
        Action = "sns:Publish"
        Resource = aws_sns_topic.alerts.arn
      },
      {
        Effect = "Allow"
        Action = "lambda:InvokeFunction"
        Resource = aws_lambda_function.remediation.arn
      },
      {
        Effect = "Allow"
        Action = "bedrock:InvokeModel"
        Resource = "*"
      },
      {
        Effect = "Allow"
        Action = "sagemaker:InvokeEndpoint"
        Resource = "arn:aws:sagemaker:${var.aws_region}:${var.account_id}:endpoint/${var.project_prefix}-endpoint"
      },
      {
        Effect = "Allow"
        Action = [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents"
        ]
        Resource = "arn:aws:logs:${var.aws_region}:${var.account_id}:log-group:/aws/sagemaker/*"
      },
      {
        Effect = "Allow"
        Action = [
          "ecr:GetAuthorizationToken",
          "ecr:BatchCheckLayerAvailability",
          "ecr:GetDownloadUrlForLayer",
          "ecr:BatchGetImage"
        ]
        Resource = "*"
      }
    ]
  })
}

###########################################################
# s3.tf
###########################################################
resource "aws_s3_bucket" "results" {
  bucket        = "${var.project_prefix}-results-${var.account_id}"
  force_destroy = true
}

resource "aws_s3_bucket" "data" {
  bucket        = "${var.project_prefix}-data-${var.account_id}"
  force_destroy = true
}

# Local file resource with CSV data
resource "local_file" "hospital_activity_csv" {
  content = <<EOT
hospital_id,vehicle_count,fullness,person_count,label
0,25,0.75,80,0
0,50,0.95,200,1
1,10,0.30,40,0
1,70,0.98,250,1
2,15,0.40,60,0
2,80,0.99,280,1
EOT
  filename = "${path.module}/hospital_activity.csv"
}

# Upload training CSV to S3
resource "aws_s3_object" "hospital_activity_data" {
  bucket = aws_s3_bucket.data.id
  key    = "hospital_activity.csv"
  source = local_file.hospital_activity_csv.filename
  etag   = filemd5(local_file.hospital_activity_csv.filename)
}

###########################################################
# training.tf
###########################################################
locals {
  training_job_name = "${var.project_prefix}-train"
}

resource "null_resource" "sagemaker_training_job" {
  depends_on = [aws_s3_object.hospital_activity_data]

  triggers = {
    csv_hash = filemd5(local_file.hospital_activity_csv.filename)
  }

  provisioner "local-exec" {
    command = <<EOT
      aws sagemaker create-training-job \
        --region ${var.aws_region} \
        --training-job-name ${local.training_job_name} \
        --algorithm-specification TrainingImage=683313688378.dkr.ecr.${var.aws_region}.amazonaws.com/sagemaker-xgboost:1.5-1,TrainingInputMode=File \
        --role-arn ${aws_iam_role.hospital_analyzer_role.arn} \
        --input-data-config '[{
          "ChannelName": "train",
          "DataSource": {
            "S3DataSource": {
              "S3DataType": "S3Prefix",
              "S3Uri": "s3://${aws_s3_bucket.data.bucket}/hospital_activity.csv",
              "S3DataDistributionType": "FullyReplicated"
            }
          },
          "ContentType": "text/csv",
          "CompressionType": "None"
        }]' \
        --output-data-config S3OutputPath=s3://${aws_s3_bucket.data.bucket}/output/ \
        --resource-config InstanceType=ml.m5.large,InstanceCount=1,VolumeSizeInGB=10 \
        --stopping-condition MaxRuntimeInSeconds=600 \
        --hyper-parameters objective=binary:logistic,num_round=10
    EOT
  }
}

###########################################################
# wait-for-training.tf
###########################################################
resource "null_resource" "wait_for_training" {
  depends_on = [null_resource.sagemaker_training_job]

  provisioner "local-exec" {
    command = <<EOT
      echo "Waiting for training job: ${local.training_job_name}"

      while true; do
        STATUS=$(aws sagemaker describe-training-job \
          --region ${var.aws_region} \
          --training-job-name ${local.training_job_name} \
          --query "TrainingJobStatus" \
          --output text 2>/dev/null || echo "NotFound")

        if [ "$STATUS" == "Completed" ]; then
          echo "Training completed ✅"
          break
        elif [ "$STATUS" == "Failed" ] || [ "$STATUS" == "Stopped" ]; then
          echo "Training FAILED ❌ (Status: $STATUS)"
          aws sagemaker describe-training-job \
            --region ${var.aws_region} \
            --training-job-name ${local.training_job_name} \
            --query "FailureReason" \
            --output text
          exit 1
        else
          echo "Still training... status=$STATUS"
          sleep 30
        fi
      done
    EOT
  }
}

###########################################################
# sns.tf
###########################################################
resource "aws_sns_topic" "alerts" {
  name = "${var.project_prefix}-alerts"
}

###########################################################
# lambda.tf
###########################################################
data "archive_file" "lambda_zip" {
  type        = "zip"
  output_path = "${path.module}/lambda.zip"

  source {
    content  = <<EOT
import json

def lambda_handler(event, context):
    print(f"Remediation triggered: {json.dumps(event)}")
    return {
        'statusCode': 200,
        'body': json.dumps('Remediation processed')
    }
EOT
    filename = "lambda_function.py"
  }
}

resource "aws_lambda_function" "remediation" {
  filename         = data.archive_file.lambda_zip.output_path
  function_name    = "${var.project_prefix}-remediation"
  role             = aws_iam_role.hospital_analyzer_role.arn
  handler          = "lambda_function.lambda_handler"
  runtime          = "python3.9"
  source_code_hash = data.archive_file.lambda_zip.output_base64sha256
}

resource "aws_cloudwatch_log_group" "lambda_logs" {
  name              = "/aws/lambda/${aws_lambda_function.remediation.function_name}"
  retention_in_days = 7
}

###########################################################
# sagemaker.tf
###########################################################
locals {
  xgboost_image = "683313688378.dkr.ecr.${var.aws_region}.amazonaws.com/sagemaker-xgboost:1.5-1"
}

resource "aws_sagemaker_model" "hospital_model" {
  depends_on = [null_resource.wait_for_training]

  name               = "${var.project_prefix}-model"
  execution_role_arn = aws_iam_role.hospital_analyzer_role.arn

  primary_container {
    image          = local.xgboost_image
    model_data_url = "s3://${aws_s3_bucket.data.bucket}/output/${local.training_job_name}/output/model.tar.gz"
  }
}

resource "aws_sagemaker_endpoint_configuration" "hospital_config" {
  name = "${var.project_prefix}-endpoint-config"

  production_variants {
    variant_name           = "AllTraffic"
    model_name             = aws_sagemaker_model.hospital_model.name
    initial_instance_count = 1
    instance_type          = "ml.m5.large"
  }
}

resource "aws_sagemaker_endpoint" "hospital_endpoint" {
  name                 = "${var.project_prefix}-endpoint"
  endpoint_config_name = aws_sagemaker_endpoint_configuration.hospital_config.name
}

###########################################################
# outputs.tf
###########################################################
output "s3_results_bucket" {
  value = aws_s3_bucket.results.bucket
}

output "s3_data_bucket" {
  value = aws_s3_bucket.data.bucket
}

output "sns_alerts_topic_arn" {
  value = aws_sns_topic.alerts.arn
}

output "lambda_function_name" {
  value = aws_lambda_function.remediation.function_name
}

output "iam_role_arn" {
  value = aws_iam_role.hospital_analyzer_role.arn
}

output "sagemaker_endpoint_name" {
  value = aws_sagemaker_endpoint.hospital_endpoint.name
}

output "training_csv_path" {
  value = "s3://${aws_s3_bucket.data.bucket}/hospital_activity.csv"
}

output "model_artifact_path" {
  value = "s3://${aws_s3_bucket.data.bucket}/output/${local.training_job_name}/output/model.tar.gz"
}
